'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5456
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.5456.
'
Namespace FaultMngService
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="FaultManagementServiceSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class FaultManagementService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private SendFileToDCOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoadFileFromDCOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SendAlarmOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.StackServer.My.MySettings.Default.StackServer_FaultMngService_FaultManagementService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event SendFileToDCCompleted As SendFileToDCCompletedEventHandler
        
        '''<remarks/>
        Public Event LoadFileFromDCCompleted As LoadFileFromDCCompletedEventHandler
        
        '''<remarks/>
        Public Event SendAlarmCompleted As SendAlarmCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendFileToDC", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendFileToDC(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal FileByte() As Byte, ByVal FileName As String, ByVal MachineName As String) As Boolean
            Dim results() As Object = Me.Invoke("SendFileToDC", New Object() {FileByte, FileName, MachineName})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendFileToDCAsync(ByVal FileByte() As Byte, ByVal FileName As String, ByVal MachineName As String)
            Me.SendFileToDCAsync(FileByte, FileName, MachineName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendFileToDCAsync(ByVal FileByte() As Byte, ByVal FileName As String, ByVal MachineName As String, ByVal userState As Object)
            If (Me.SendFileToDCOperationCompleted Is Nothing) Then
                Me.SendFileToDCOperationCompleted = AddressOf Me.OnSendFileToDCOperationCompleted
            End If
            Me.InvokeAsync("SendFileToDC", New Object() {FileByte, FileName, MachineName}, Me.SendFileToDCOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendFileToDCOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendFileToDCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendFileToDCCompleted(Me, New SendFileToDCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LoadFileFromDC", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoadFileFromDC(ByVal FileName As String) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("LoadFileFromDC", New Object() {FileName})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoadFileFromDCAsync(ByVal FileName As String)
            Me.LoadFileFromDCAsync(FileName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoadFileFromDCAsync(ByVal FileName As String, ByVal userState As Object)
            If (Me.LoadFileFromDCOperationCompleted Is Nothing) Then
                Me.LoadFileFromDCOperationCompleted = AddressOf Me.OnLoadFileFromDCOperationCompleted
            End If
            Me.InvokeAsync("LoadFileFromDC", New Object() {FileName}, Me.LoadFileFromDCOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoadFileFromDCOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoadFileFromDCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoadFileFromDCCompleted(Me, New LoadFileFromDCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendAlarm", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SendAlarm(ByVal SysLocation As String, ByVal HostIP As String, ByVal HostName As String, ByVal AlarmType As String, ByVal AlarmName As String, ByVal Severity As String, ByVal AlarmValue As String, ByVal Desc As String, ByVal FlagClear As String, ByVal AlarmMethod As String) As Boolean
            Dim results() As Object = Me.Invoke("SendAlarm", New Object() {SysLocation, HostIP, HostName, AlarmType, AlarmName, Severity, AlarmValue, Desc, FlagClear, AlarmMethod})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SendAlarmAsync(ByVal SysLocation As String, ByVal HostIP As String, ByVal HostName As String, ByVal AlarmType As String, ByVal AlarmName As String, ByVal Severity As String, ByVal AlarmValue As String, ByVal Desc As String, ByVal FlagClear As String, ByVal AlarmMethod As String)
            Me.SendAlarmAsync(SysLocation, HostIP, HostName, AlarmType, AlarmName, Severity, AlarmValue, Desc, FlagClear, AlarmMethod, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SendAlarmAsync(ByVal SysLocation As String, ByVal HostIP As String, ByVal HostName As String, ByVal AlarmType As String, ByVal AlarmName As String, ByVal Severity As String, ByVal AlarmValue As String, ByVal Desc As String, ByVal FlagClear As String, ByVal AlarmMethod As String, ByVal userState As Object)
            If (Me.SendAlarmOperationCompleted Is Nothing) Then
                Me.SendAlarmOperationCompleted = AddressOf Me.OnSendAlarmOperationCompleted
            End If
            Me.InvokeAsync("SendAlarm", New Object() {SysLocation, HostIP, HostName, AlarmType, AlarmName, Severity, AlarmValue, Desc, FlagClear, AlarmMethod}, Me.SendAlarmOperationCompleted, userState)
        End Sub
        
        Private Sub OnSendAlarmOperationCompleted(ByVal arg As Object)
            If (Not (Me.SendAlarmCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SendAlarmCompleted(Me, New SendAlarmCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub SendFileToDCCompletedEventHandler(ByVal sender As Object, ByVal e As SendFileToDCCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendFileToDCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub LoadFileFromDCCompletedEventHandler(ByVal sender As Object, ByVal e As LoadFileFromDCCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoadFileFromDCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")>  _
    Public Delegate Sub SendAlarmCompletedEventHandler(ByVal sender As Object, ByVal e As SendAlarmCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SendAlarmCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
End Namespace
